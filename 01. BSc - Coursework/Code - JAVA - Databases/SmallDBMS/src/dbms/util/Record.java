package dbms.util;

import java.io.Serializable;
import java.nio.ByteBuffer;

import dbms.parser.SQLTokens;

/**
 * Describes the record as ti is described in our database.
 */
public class Record implements Serializable {
	/**
	 * The autogenerated serial version UID.
	 */
	private static final long serialVersionUID = 2008778631220684786L;

	/**
	 * The dead flag. Denotes whether or not a record is dead.
	 */
	private boolean dead;

	/**
	 * The fields of the record.
	 */
	private final Object[] fields;

	/**
	 * The size of the field.
	 */
	private final int fieldsSize;

	/**
	 * The index of the primary key.
	 */
	private final int primaryKeyIndex;

	/**
	 * Creates a record by assigning the values taken from the parameters, to the
	 * appropriate fields.
	 * 
	 * @param fields
	 *            The fields of the record.
	 * @param fieldsSize
	 *            The size of the field.
	 * @param primaryKeyIndex
	 *            The primary key index.
	 */
	public Record(final Object[] fields, final int fieldsSize,
			final int primaryKeyIndex) {
		this.dead = false;
		this.fields = fields;
		this.fieldsSize = fieldsSize;
		this.primaryKeyIndex = primaryKeyIndex;
	} // end method Record

	/**
	 * Creates a dead record. These are used to initialize a page or a leaf.
	 * 
	 * @param emptyFields
	 *            Empty fields.
	 * @param fieldsSize
	 *            The size of the field.
	 */
	public Record(final Object[] emptyFields, final int fieldsSize) {
		// Δομήτης που χρησιμοποιείται για τη δημιουργία <<νεκρών>> εγγραφών.
		this.dead = true;
		this.fields = emptyFields;
		this.fieldsSize = fieldsSize;
		this.primaryKeyIndex = -1;
	} // end method Record

	/**
	 * Creates records using a </code>ByteBuffer</code> object.
	 * 
	 * @param recordBuffer
	 *            The byte buffer.
	 */
	public Record(final ByteBuffer recordBuffer) {
		// Δομήτης που χρησιμοποιείται για τη δημιουργία εγγραφών από έναν
		// byte buffer.
		this.dead = recordBuffer.get() == 1 ? true : false;

		// Ο τρέχων πίνακας προσδιορίζει τον τύπο και το πλήθος των πεδίων της
		// εγγραφής.
		Table table = dbms.Main.getCurrentTable();

		this.fields = new Object[table.getNumberOfColumns()];

		// Ανάλογα με τον τύπο του πεδίου αντλείται απ' το buffer διαφορετικό
		// πλήθος byte.
		for (int i = 0; i < table.getNumberOfColumns(); i++) {
			if (table.getColumnType(i) == SQLTokens.INTEGER) {
				Integer num = recordBuffer.getInt();
				this.fields[i] = num;
			} // end if
			else {
				char[] wordAsArray = new char[50];
				for (int j = 0; j < 50; j++) {
					wordAsArray[j] = recordBuffer.getChar();
				} // end for

				this.fields[i] = new Char(wordAsArray);
			} // end else
		} // end for

		this.fieldsSize = recordBuffer.getInt();
		this.primaryKeyIndex = recordBuffer.getInt();
	} // end method Record

	/**
	 * Makes a record dead.
	 */
	public void killRecord() {
		this.dead = true;
	} // end method killRecord

	/**
	 * Checks if a a record is dead or not.
	 * 
	 * @return <code>true</code> if a record is dead and <code>false</code>
	 *         othewise.
	 */
	public boolean isDead() {
		return this.dead;
	} // end method isDead

	/**
	 * Retrieves the primary key.
	 * 
	 * @return The primary key.
	 */
	public int getPrimaryKey() // Μόνο ένας ακέραιος αριθμός μπορεί να είναι
	// πρωτεύον κλειδί
	{
		return (Integer) this.fields[this.primaryKeyIndex];
	} // end method getPrimaryKey

	/**
	 * Retrieves the key.
	 * 
	 * @param index
	 *            The desired index.
	 * @return <code>Object</code> The key. 
	 */
	public Object getKey(final int index) {
		return this.fields[index];
	} // end method getKey

	/**
	 * Converts a record to <code>ByteArray</code>.
	 * 
	 * @return The <code>ByteArray</code>.
	 */
	public byte[] toByteArray() {
		// Η μέθοδος χρησιμοποιείται για μετατροπή μιας εγγραφής σε μια σειρά
		// από byte.
		ByteBuffer buffer = ByteBuffer.allocate(this.getRecordSize());

		Byte byteForm = this.dead ? (byte) 1 : (byte) 0;
		buffer.put(byteForm);

		// Ο τρέχων πίνακας προσδιορίζει τον τύπο και το πλήθος των πεδίων της
		// εγγραφής.
		Table table = dbms.Main.getCurrentTable();

		// Ανάλογα με τον τύπο του πεδίου εισάγεται στο buffer διαφορετικό
		// πλήθος byte.
		for (int i = 0; i < table.getNumberOfColumns(); i++) {
			if (table.getColumnType(i) == SQLTokens.INTEGER) {
				buffer.putInt((Integer) this.fields[i]);
			} // end if
			else {
				buffer.put(((Char) this.fields[i]).toByteArray());
			} // end else
		} // end for

		buffer.putInt(this.fieldsSize);
		buffer.putInt(this.primaryKeyIndex);

		return buffer.array();
	} // end method toByteBuffer

	/**
	 * Retrieves the record size.
	 * 
	 * @return The record size.
	 */
	public int getRecordSize() {
		return this.fieldsSize + 9;
	} // end method getRecordSize

	/**
	 * Overrides the <code>clone()</code>method.
	 * 
	 * @return A <code>Record</code>
	 */
	@Override
	public Record clone() {
		Record clone = new Record(this.fields.clone(), this.fieldsSize,
				this.primaryKeyIndex);

		if (this.dead)
			clone.killRecord();

		return clone;
	} // end method clone

	/**
	 * Overrides the <code>equals</code> method.
	 * 
	 * @return <code>true</code> if the objects are equal and
	 *         <code>false</code> otherwise.
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj instanceof Record) {
			if (this.fieldsSize != ((Record) obj).fieldsSize)
				return false;
			if (this.dead != ((Record) obj).dead)
				return false;
			if (this.primaryKeyIndex != ((Record) obj).primaryKeyIndex)
				return false;
			for (int i = 0; i < fields.length; i++) {
				if (!this.fields[i].equals(((Record) obj).fields[i]))
					return false;
			}
			return true;
		}
		return false;
	}
} // end class Record
